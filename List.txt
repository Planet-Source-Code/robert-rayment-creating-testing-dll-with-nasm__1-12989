     1                                  ;RRBits . asm   For NASM
     2                                  
     3                                  ;VB
     4                                  ;Private Declare Sub RRBits Lib "RRBits" _
     5                                  ;(ByVal BitType As Long, ByVal BitPosNum As Long, _
     6                                  ;ByVal InNum As Long, ByRef Result As Long)
     7                                  
     8                                  ;BitPosNum is bit position to set,clr or test
     9                                  ;or number of times to rotate or shift to a max of 255
    10                                  
    11                                  ;InNum is unchanged
    12                                  ;Note Result is ByRef
    13                                  
    14                                  ;Const BITTEST As Long = 0   'Result = 0 bit BitPos was 0, 1 bit BitPos was 1
    15                                  ;Const BITSHL As Long = 1    'Result = InNum shift left BitPosNum times 0 in low bit
    16                                  ;Const BITSHR As Long = 2    'Result = InNum shift right BitPosNum times 0 in high bit
    17                                  ;Const BITROL As Long = 3    'Result = InNum rotate left BitPosNum times
    18                                  ;Const BITROR As Long = 4    'Result = InNum rotate right BitPosNum times
    19                                  ;Const BITCLR As Long = 5    'Result = InNum with bit BitPos = 0
    20                                  ;Const BITSET As Long = 6    'Result = InNum with bit BitPos = 1
    21                                  
    22                                  	SEGMENT code Use32
    23                                  	GLOBAL _DllMain
    24 00000000 B801000000              _DllMain:	mov eax,1
    25 00000005 C20C00                  		retn 12
    26                                  
    27                                  	GLOBAL RRBits
    28                                  RRBits:
    29 00000008 C8000000                	enter 0,0
    30 0000000C 53                      	push ebx
    31                                  
    32 0000000D 8B4508                  	mov eax,[ebp+8]	;Bytes in InNum
    33 00000010 3D00000000              	cmp eax,0
    34 00000015 0F8482000000            	je NEAR BitTEST
    35                                  
    36 0000001B 3D01000000              	cmp eax, 1
    37 00000020 746E                    	je BitSHL
    38                                  
    39 00000022 3D02000000              	cmp eax, 2
    40 00000027 745A                    	je BitSHR
    41                                  
    42 00000029 3D03000000              	cmp eax, 3
    43 0000002E 7446                    	je BitROL
    44                                  
    45 00000030 3D04000000              	cmp eax, 4
    46 00000035 7432                    	je BitROR
    47                                  
    48 00000037 3D05000000              	cmp eax, 5
    49 0000003C 7414                    	je BitCLR
    50                                  ;-----------------------------------
    51                                  	;eax=6  BitSET	
    52 0000003E BA01000000              	mov edx,1
    53 00000043 8B4D0C                  	mov ecx,[ebp+12]	;BitPosNum
    54 00000046 D3C2                    	rol edx,cl		;Rotate edx BitPos times
    55 00000048 8B4510                  	mov eax,[ebp+16]	;InNum
    56 0000004B 09D0                    	or eax,edx	;eax is result
    57 0000004D E95C000000              	jmp GETOUT
    58                                  ;-----------------------------------
    59                                  BitCLR:
    60 00000052 BA01000000              	mov edx,1
    61 00000057 8B4D0C                  	mov ecx,[ebp+12]	;BitPosNum
    62 0000005A D3C2                    	rol edx,cl		;Rotate edx BitPos times
    63 0000005C F7DA                    	neg edx		;2's complement+1
    64 0000005E 4A                      	dec edx		;2's complement
    65 0000005F 8B4510                  	mov eax,[ebp+16]	;InNum
    66 00000062 21D0                    	and eax,edx	;eax is result
    67 00000064 E945000000              	jmp GETOUT
    68                                  ;-----------------------------------
    69                                  BitROR:
    70 00000069 8B4D0C                  	mov ecx,[ebp+12]	;BitPosNum
    71 0000006C 8B4510                  	mov eax,[ebp+16]	;InNum
    72 0000006F D3C8                    	ror eax,cl		;Rotate right eax cl times
    73 00000071 E938000000              	jmp GETOUT
    74                                  ;-----------------------------------
    75                                  BitROL:
    76 00000076 8B4D0C                  	mov ecx,[ebp+12]	;BitPosNum
    77 00000079 8B4510                  	mov eax,[ebp+16]	;InNum
    78 0000007C D3C0                    	rol eax,cl		;Rotate left eax cl times
    79 0000007E E92B000000              	jmp GETOUT
    80                                  ;-----------------------------------
    81                                  BitSHR:
    82 00000083 8B4D0C                  	mov ecx,[ebp+12]	;BitPosNum
    83 00000086 8B4510                  	mov eax,[ebp+16]	;InNum
    84 00000089 D3E8                    	shr eax,cl		;Shift right eax cl times
    85 0000008B E91E000000              	jmp GETOUT
    86                                  ;-----------------------------------
    87                                  BitSHL:
    88 00000090 8B4D0C                  	mov ecx,[ebp+12]	;BitPosNum
    89 00000093 8B4510                  	mov eax,[ebp+16]	;InNum
    90 00000096 D3E0                    	shl eax,cl		;Shift left eax cl times
    91 00000098 E911000000              	jmp GETOUT
    92                                  ;-----------------------------------
    93                                  BitTEST:
    94 0000009D 8B4D0C                  	mov ecx,[ebp+12]	;BitPosNum
    95 000000A0 8B4510                  	mov eax,[ebp+16]	;InNum
    96 000000A3 0FA3C8                  	bt eax,ecx
    97 000000A6 B800000000              	mov eax,0
    98 000000AB 7301                    	jnc GETOUT	;bit not set ie 0
    99 000000AD 40                      	inc eax		;bit set ie 1
   100                                  ;-----------------------------------
   101                                  GETOUT:	;result in eax
   102                                  
   103 000000AE 8B5D14                  	mov ebx,[ebp+20]	; ->Result
   104 000000B1 8903                    	mov [ebx],eax	;Result
   105                                  
   106 000000B3 5B                      	pop ebx
   107 000000B4 C9                      	leave
   108 000000B5 C21000                  	retn 16
   109                                  ENDS
